{
  "antiPatterns": [
    {
      "name": "Ambiguous Service",
      "aliases": [
        "Ambiguous Name"
      ],
      "description": "Is an antipattern where the developers use the names of interface elements (e.g., port-types, operations, and messages) that are very short or long, include too general terms, or even show the improper use of verbs.",
      "context": "",
      "detection": "",
      "consequences": "Reduce discoverability and the reusability.",
      "cause": "",
      "solution": "",
      "example": "callEventServiceWithUserEntityAndOrderAndUpdateList(), callEventServiceWithUserEntityAndOrderAndUpdateListAsync(), callUserService1(), callUserService2()",
      "sources": [
        "@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}",
        "@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, acmid = {2754724}, publisher = {ACM}, address = {New York, NY, USA}}"
      ],
      "tags": [
        "antipattern",
        "service",
        "microservice"
      ]
    }
  ]
}
