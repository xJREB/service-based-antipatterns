{
  "antiPatterns": [
    {
      "name": "Megaservice",
      "aliases": [
        "Multiservice",
        "The God Object",
        "Big Ball of Mud"
      ],
      "description": "A service that is responsible for many functionalities and should be decomposed into separated microservices.",
      "context": "",
      "detection": "Typically a Megaservice is a single service exposing a large number of public interface methods which support lots of functionality for different entities which might not be closely related to each other.",
      "consequences": "The service has a large number of methods which include multiple core abstractions or multiple data types that are exchanged. There are only a few or possibly only one service within the system which has to handle all the processes. This also means that multiple developers will maintain and therefore, modify the same service concurrently. Any changes to the service's interface result in rebuilding and redeploying a number of other services which use this interface. Since the number of methods and interactions in a Megaservice is very large, unit testing such a service becomes very time consuming due the dependencies within the service. The size and complexity of the a Megaservice can also mean that deploying the service needs special configuration.",
      "cause": "The requirements might be nonexistent or poorly structured making it very hard to identify their abstractions. Often patterns are used when designing the services which might lead to antipatterns when misunderstood or wrongly applied. One of such patterns is the Session Facade pattern which can lead to a Megaservice when misunderstood. Instead of misunderstood patterns the designer of the service could have also misunderstood the principles of high cohesion and low coupling or not applied them at all, resulting in a Megaservice as well.",
      "solution": "The service's inappropriate methods need to be extracted to new interfaces.",
      "example": "A service, implementing methods for ordering, paying and shipping and order.",
      "sources": [
        "@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}",
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@article{7332971, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603-617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July},}",
        "@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}"
      ],
      "tags": [
        "architecture", "system", "service", "microservice"
      ]
    }
  ]
}
  
