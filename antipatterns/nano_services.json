{
  "antiPatterns": [
    {
      "name": "Nanoservices",
      "aliases": [
        "Tiny Service",
        "Refactor Mercilessly",
        "Fine Grained Web Service",
        "Fine-Grained Services",
        "Fine-Grained Interfaces"
      ],
      "description": "A service is too fine-grained, so that communications, maintenance, and so on outweights its utility. Such services often require several other coupled services to complete an abstraction.",
      "context": "A SOA is often designed by using many simple services communication together. These services might not always been build initially to support SOA but maybe to be used by RPC which produces a large number of procedure calls.",
      "detection": "A nanoservice interface has few methods or possibly only one which implements an incomplete subset of one abstraction.",
      "consequences": "Bad performance, fragmented logic and overhead due to the few interface methods. The functionality of one core abstraction is cluttered to multiple services. This means multiple services have to be changed during implementation and maintenance of a particular application requirement. Testing sucha requirement also involves testing numerous services at once. Therefore, developer also need to know about the functionality and interoperability of multiple services.",
      "cause": "The requirements might be nonexistent or poorly structured making it very hard to identify their abstractions so individual use cases are mapped into separate services. Often patterns are used when designing the services which might lead to antipatterns when misunderstood or wrongly applied. One of such patterns is the EJB Command pattern which can lead to a Nano service when misunderstood.",
      "solution": "Consolidate separate but related services to a single one.",
      "example": "Single services for creating an order, delivering an order, updating an order, and approving an order.",
      "sources": [
        "@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}",
        "@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}",
        "@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}",
        "@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}",
        "@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, acmid = {2754724}, publisher = {ACM}, address = {New York, NY, USA}}"
      ],
      "tags": [
        "antipattern",
        "architecture",
        "system",
        "microservice"
      ]
    }
  ]
}
  