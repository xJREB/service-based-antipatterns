{
  "antiPatterns": [
    {
      "name": "No Legacy",
      "aliases": [
        ""
      ],
      "description": "Large vendors often prefer to rewrite a legacy application because they do not want to keep obsolete parts in their new system. Since SOA allows to integrate applications and rewriting legacy systems typically involves an immense investment, this strategy is often not a good idea.",
      "context": "The management does not want to keep legacy systems and therefore, wants to rewrite the entire application.",
      "detection": "",
      "consequences": "Very costly antipattern since legacy systems have to rewritten which typically causes an immense additional investment.",
      "cause": "Project management does not understand that integrating legacy systems into a new SOA system does not necessarily have to be a bad thing.",
      "solution": "Project management first has to accept that stable parts of a legacy systems are not necessarily bad to integrate in the new system. The candidates for integration have to be chosen and equipped with user-oriented interfaces. On the legacy system we can use front-end gates to achieve this.",
      "example": "",
      "sources": [
        "@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}",
        "@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}"
      ],
      "tags": [
        "antipattern",
        "management",
        "legacy"
      ]
    }
  ]
}
