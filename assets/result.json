{"antiPatterns":[{"name":"Ambiguous Interface","aliases":[],"description":"The interface of a service offers a single and very general operation.","context":"","detection":"A service implements a large amount of functionality, but provides only one public operation to invoke all of it. Accepted requests are internally forwarded to various methods.","consequences":"Analyzability and understandability are reduced, because the service does not publish all its provided functionality in a clear manner. Therefore, a user has to analyze the implementation of the service before using it.","cause":"May easily appear in pub-sub systems, where interactions are not explicitly modeled and multiple services exchange event messages via a shared event bus.","solution":"Split the single generic operation into multiple more specialized operations.","example":"Interface with a single public operation that takes a generic type as parameter.","sources":["@inproceedings{garcia2009toward, author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad}, title = {Toward a Catalogue of Architectural Bad Smells}, booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems}, series = {QoSA '09}, year = {2009}, isbn = {978-3-642-02350-7}, location = {East Stroudsburg, PA, USA}, pages = {146--162}, numpages = {17}, url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10}, doi = {10.1007/978-3-642-02351-4_10}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}}","@inproceedings{de2014architectural, author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica}, year = {2014}, month = {04}, pages = {12}, title = {Architectural bad smells in Software Product Lines: An exploratory study}, journal = {ACM International Conference Proceeding Series}, doi = {10.1145/2578128.2578237}}"],"tags":["microservices","soa","application","ambiguity"],"relatedItems":[{"relation":"relates","name":"Bloated Service"}]},{"name":"Ambiguous Service","aliases":["Ambiguous Web Service","Ambiguous Name"],"description":"A service that includes interface elements (e.g., port types, operations, and messages) with unclear names, i.e. names that are very short or long, include too general terms, or even show the improper use of verbs.","context":"","detection":"","consequences":"Discoverability and reusability are reduced.","cause":"","solution":"","example":"callEventServiceWithUserEntityAndOrderAndUpdateList(), callEventServiceWithUserEntityAndOrderAndUpdateListAsync(), callUserService1(), callUserService2()","sources":["@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}","@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","application","ambiguity"],"relatedItems":[]},{"name":"API Versioning","aliases":["Static Contract Pitfall"],"description":"A lack of semantically consistent versions of APIs (e.g. v1.1, v1.2, etc.).","context":"","detection":"","consequences":"In case of updates to non-semantically versioned APIs, consumers may face breaking changes. For example, returned data may be different or may need to be called differently.","cause":"","solution":"APIs need to be semantically versioned to allow services to know whether they are communicating with the correct version or whether they need to adapt their communication to a new contract.","example":"API release v1, then release v3","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}"],"tags":["microservices","soa","application"],"relatedItems":[]},{"name":"Big Bang","aliases":[""],"description":"A strategy often preferred by large vendors where an entire system is built \"at once\".","context":"","detection":"","consequences":"Creating a large system in a Big Bang may lead to poorly understood requirements and inconsistencies in the architecture. Communication between and integration of services may be inefficient.","cause":"Due to fine-grained interfaces, services are not independent enough and an incremental development is not possible.","solution":"Coarse grained user-oriented interfaces should be used and required capabilities should be properly decomposed into autonomous services.","example":"","sources":["@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}"],"tags":["soa","architecture","legacy","coupling"],"relatedItems":[{"relation":"precedes","name":"Nothing New"},{"relation":"precedes","name":"nanoservices"},{"relation":"follows","name":"No Legacy"}]},{"name":"Bloated Service","aliases":[""],"description":"A service that has one large interface with many parameter data types and performs mostly heterogeneous operations with low cohesion.","context":"","detection":"","consequences":"","cause":"","solution":"","example":"","sources":["@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","application","cohesion"],"relatedItems":[{"relation":"relates","name":"Ambiguous Interface"}]},{"name":"Bottleneck Service","aliases":[""],"description":"A service that is being used by too many consumers and therefore becomes a bottleneck and single point of failure.","context":"","detection":"","consequences":"The service may have increased response times and low availability. It also becomes a single point of failure in the architecture.","cause":"Functionality may gradually become more and more important and is therefore used by more and more consumers, maybe even external ones via a public service interface. To maximize reuse, service interfaces are sometimes also generalized which leads to more service consumers as well.","solution":"","example":"","sources":["@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture"],"relatedItems":[]},{"name":"Business Process Forever","aliases":["No Businessmen Involvement"],"description":"Business processes have been strictly defined and are now static and cannot be easily changed.","context":"Especially in small and medium sized businesses, business processes are often not stable. Moreover, not enough data of good quality may be available to allow a solid design.","detection":"","consequences":"Business process owners have little to no control over the outcome and quality of their processes, since they cannot change their structure. They are merely observers.","cause":"Business processes have been rigorously defined in the past and are now regarded as stable by technical experts. Therefore, business owners may not be able to easily commission for changes.","solution":"End-users have to be involved in the business processes and therefore, user-oriented interfaces have to be created. In Microservices, cross-functional teams ensure a holistic view on services and their functionality.","example":"","sources":["@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}"],"tags":["microservices","soa","business"],"relatedItems":[]},{"name":"Chatty Service","aliases":["Chatty Web Service"],"description":"A high number of operations is required to complete one abstraction. Such operations are typically attribute-level setters or getters.","context":"","detection":"A chatty service may have many fine-grained operations.","consequences":"Maintenance becomes harder, like e.g. changing the order of invocations. Many interactions are required, which leads to overall higher response time.","cause":"","solution":"","example":"","sources":["@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}","@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture","abstraction"],"relatedItems":[{"relation":"precedes","name":"Nanoservices"},{"relation":"relates","name":"CRUDy Interface"},{"relation":"relates","name":"Service Chain"}]},{"name":"Client Completes Service","aliases":["Incomplete Service"],"description":"A service has a well defined abstraction and interface. However, the functionality of the service requires additional implementation for non-functional requirements by the client such as input validation and security checking.","context":"","detection":"In web-based applications, client artifacts such as JSP or servlets include code for e.g. data validation or security checking.","consequences":"Implementing security-related functionality in a client instead of in the server may lead to the insertion of bad data or unauthorized access to the service. Functionality also has to be implemented multiple times for each client. Unit tests for such functionality (e.g. data validation) may fail or contain a lot of overhead code to properly test such a service.","cause":"Mainly caused by a lack of understanding that services shall be self-contained, standalone functional components. This comes from a web-centric development approach where developers think that client artifacts are the only ones that use the service. A lack of communication in the development team can also lead to this antipattern.","solution":"Refactor the infrastructure-related functionality from the client to the server. The client can still include some code for e.g. data validation or security checking to enhance its performance or usability.","example":"A servlet or JSP includes code to validate user input in order to correctly use an underlying service.","sources":["@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"],"tags":["soa","architecture","abstraction"],"relatedItems":[]},{"name":"Connector Envy","aliases":[""],"description":"Services implement large amounts of low-level interaction-related functionality, e.g. for communication, coordination, conversation, or facilitation. These functionalities should be implemented by a connector instead.","context":"","detection":"","consequences":"Reusability is reduced, because these low-level details are too specific and not agnostic enough. Understandability is reduced, because different concerns are mixed. Testability is reduced, because the connector and service funtionality cannot be tested separately.","cause":"Performance may have been preferred over maintainability, since separation of connector and service functionality would create an additional level of indirection. This sometimes also leads to new threads or processes.","solution":"Extract the interaction-related functionality into a separate connector service.","example":"Service A implements communication and facilitation services. It also imports a communication library, which means that it manages networking facilities for remote communication. But the delivery and routing services handled by the remote communication are a type of facilitation service ","sources":["@inproceedings{garcia2009toward, author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad}, title = {Toward a Catalogue of Architectural Bad Smells}, booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems}, series = {QoSA '09}, year = {2009}, isbn = {978-3-642-02350-7}, location = {East Stroudsburg, PA, USA}, pages = {146--162}, numpages = {17}, url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10}, doi = {10.1007/978-3-642-02351-4_10}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}}","@inproceedings{de2014architectural, author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica}, year = {2014}, month = {04}, pages = {12}, title = {Architectural bad smells in Software Product Lines: An exploratory study}, journal = {ACM International Conference Proceeding Series}, doi = {10.1145/2578128.2578237}}"],"tags":["microservices","soa","architecture"],"relatedItems":[{"relation":"relates","name":"SOAPY Business Logic"}]},{"name":"CRUDy Interface","aliases":["Maybe It is Not RPC"],"description":"An RPC-like behaviour is used to design create, read, update and delete (CRUD) operations as service interfaces which can result in chatty API interactions and poor system performance.","context":"","detection":"","consequences":"If several CRUD operations are necessary for the completion of one abstraction, this can lead to chatty API interaction, because multiple methods need to be invoked to achieve one goal. This can be especially harmful when synchronous requests are chained together.","cause":"","solution":"CRUD operations should not be exposed via interfaces. Instead, a more coarse-grained operation should be created to fulfill an abstraction.","example":"create_X(), read_Y()","sources":["@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["soa","application","data_management"],"relatedItems":[{"relation":"relates","name":"Chatty Service"},{"relation":"precedes","name":"Data Service"}]},{"name":"Cyclic Dependency","aliases":[""],"description":"A cyclic chain of calls between services exists.","context":"","detection":"Services depend on each other in a cyclic interaction pattern, e.g. A calls B, B calls C, and C calls back A.","consequences":"Services involved in a cyclic dependency can be harder to maintain or reuse.","cause":"","solution":"Resolve the cycles by e.g. relocating functionality (merging) or use an intermediary like the API Gateway pattern.","example":"A depends on B, B on C and C on A","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}"],"tags":["soa","microservices","architecture","coupling"],"relatedItems":[{"relation":"relates","name":"Chatty Service"},{"relation":"relates","name":"Nanoservices"}]},{"name":"Data Service","aliases":["Data Web Service"],"description":"A service that exclusively performs information retrieval and typically provides only simple read operations.","context":"","detection":"The service only contains accessor operations, i.e. getters and setters, and usually deals with very small messages with primitive data types.","consequences":"A data service may have a large number of operations with low cohesion, which can have a negative influence on maintainability.","cause":"","solution":"","example":"","sources":["@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}","@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["soa","architecture","cohesion","data_management"],"relatedItems":[{"relation":"follows","name":"CRUDy Interface"},{"relation":"precedes","name":"Wrong Cuts"}]},{"name":"Data-Driven Migration","aliases":[""],"description":"You migrate from a monolithic application to a microservices architecture and try to migrate both service functionality and the corresponding data together.","context":"Because it is difficult to get the granularity of each service right the first time, you may be frequently merging or splitting your services. Ideally, you want to migrate the data for each service only once, because data migrations are complex and error-prone much more than source code migrations.","detection":"","consequences":"Additional efforts for data migration, because you will need several iterations to get it right.","cause":"Trying to split the data for each service right the first time.","solution":"First, migrate the functionality of each service and worry about bounded contexts between services and data later. Once you learn more about the services, you will likely adjust the level of granularity through merging and splitting. After reaching a stable level of service granularity, migrate the data.","example":"","sources":["@book{richards2016microservices, author = {Richards, Mark}, isbn = {9781491963319}, pages = {66}, title = {{Microservices AntiPatterns and Pitfalls}}, year = {2016}}"],"tags":["microservices","business","migration","data_management","migration"],"relatedItems":[]},{"name":"","aliases":[""],"description":"","context":"","detection":"","consequences":"","cause":"","solution":"","example":"","sources":[""],"tags":[""],"relatedItems":[{"relation":"","name":""}]},{"name":"Duplicated Service","aliases":["Duplicated Web Service","Too many Cooks in the SOA"],"description":"Two or more services with highly similar functionality exist.","context":"While Microservices usually follow a 'share nothing' philosophy, reuse is a common theme in SOA. Service normalization and consolidation are therefore frequent activities in an SOA to reduce the level of duplication. In Microservices on the other, you consciously allow duplication to exist up to a certain degree, because it reduces coupling and dependencies in your system.","detection":"Services or operations with similar or identical names and/or message parameters may exist in your system.","consequences":"Duplicated functionality reduces the level of reuse and may confuse service consumers that cannot identify the service or operation they need. Moreover, if this common functionality changes, it needs to change in all duplicated locations, therefore causing higher maintenance efforts. A culture of 'build and expose' may form where the enterprise becomes a mess of services all attempting to do the same thing.","cause":"","solution":"Consolidate the duplicate functionality into a single service. If necessary, raise the level of abstraction. Be aware though that this increases coupling in the system and may make the consolidated service a bottleneck or single point of failure.","example":"","sources":["@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}","@misc{Jones2006, title = {{SOA anti-patterns}}, year = {2006}, booktitle = {InfoQ}, author = {Jones, Steve}, url = {https://www.infoq.com/articles/SOA-anti-patterns} }"],"tags":["soa","architecture","ambiguity"],"relatedItems":[{"relation":"relates","name":"Extraneous Adjacent Connector"}]},{"name":"Extraneous Adjacent Connector","aliases":["Redundant PortTypes"],"description":"Two or more connectors of different types are used to link a pair of services. The services therefore offer different port types that may perform similar operations on the same messages.","context":"","detection":"","consequences":"Using two different types of connectors may cancel the benefit of each one out. Additionally, adaptability and understandability of the service may be reduced.","cause":"May be accidentially introduced by trying to solve another issue. For example, one service received an additional connector to adress another service directly to avoid unnecessary network traffic.","solution":"If a harmonization of protocols and connectors is not possible, one solution is to use an event bus instead of direct access connectors.","example":"Component B can directly access Component A, but they are also connected through an event bus.","sources":["@inproceedings{garcia2009toward, author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad}, title = {Toward a Catalogue of Architectural Bad Smells}, booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems}, series = {QoSA '09}, year = {2009}, isbn = {978-3-642-02350-7}, location = {East Stroudsburg, PA, USA}, pages = {146--162}, numpages = {17}, url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10}, doi = {10.1007/978-3-642-02351-4_10}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}}","@inproceedings{de2014architectural, author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica}, year = {2014}, month = {04}, pages = {12}, title = {Architectural bad smells in Software Product Lines: An exploratory study}, journal = {ACM International Conference Proceeding Series}, doi = {10.1145/2578128.2578237}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["soa","architecture","ambiguity"],"relatedItems":[]},{"name":"Golden Hammer","aliases":["When in doubt, make it a service"],"description":"A system implements its functionality as services although there are no objective reasons for and benefits from this. Algorithmic functions can also be a type of this antipattern if they are frequently used and rely on large data exchanges.","context":"","detection":"","consequences":"Unnecessary distribution can lead to performance issues, because direct communication is more efficient. There are also higher efforts for development, testing, and debugging, because implementing functionality as services is complex.","cause":"Services may be chosen because of their promised scalability, modifiability, or interoperability, even though these quality attributes are not really vital for the system at hand. A general reason therefore is a poor understanding of the system's requirements. Lastly, using new and hyped technology or architectural styles is attractive and tempting for a lot of developers and architects.","solution":"Refactor service to appropriate Java/J2EE component.","example":" Functionality is implemented as a web service, although it is only used internally by the system. The assumption is that this would be better for future requirements, but it reduces the performance.","sources":["@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"],"tags":["microservices","soa","architecture"],"relatedItems":[{"relation":"relates","name":"Silver Bullet"},{"relation":"relates","name":"Nothing New"},{"relation":"relates","name":"The Shiny Nickel"}]},{"name":"Hard-Coded Endpoints","aliases":["Hardcoded IPs and Ports","Point to Point Web Services"],"description":"Hardcoded IP addresses and ports are used to define endpoints of required services.","context":"","detection":"","consequences":"Services connected via hardcoded endpoints may cause unnecessary amounts of effort when service locations or the number of service instances frequently changes.","cause":"","solution":"Adopt a dynamic service discovery approach via the service registry pattern.","example":"","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}","@misc{Jones2006, title = {{SOA anti-patterns}}, year = {2006}, booktitle = {InfoQ}, author = {Jones, Steve}, url = {https://www.infoq.com/articles/SOA-anti-patterns} }"],"tags":["microservices","soa","application"],"relatedItems":[]},{"name":"Low Cohesive Operations","aliases":[""],"description":"A service that provides many low cohesive operations that are not really related to each other.","context":"High cohesion is one of the most important design principles for SOA and Microservices. Services should provide operations that are closely related to each other. Functionality that is likely to change together should be in the same service.","detection":"","consequences":"The maintainability of such a service may be reduced. It may be more difficult to analyze and grasp all provided service functionality.","cause":"","solution":"","example":"","sources":["@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture"],"relatedItems":[]},{"name":"Megaservice","aliases":["Multiservice","The God Object","God Object Web Service","Big Ball of Mud"],"description":"A service that provides a large number of operations for multiple different business and technical abstractions.","context":"","detection":"The service possesses a variety of public interface operations that are related to different domains or entities.","consequences":"Having only a few or even a single large service within the system may impact maintainability, performance, and availability. A very large service is harder to analyze and comprehend. Furthermore, multiple developers will concurrently work on the same service, which can cause conflicts and unnecessary redeployments. Such a service will also have many consumers and therefore increases coupling in the system. Any changes to its interface result in ripples to these consumers. Moreover, unit testing such a service becomes very time consuming due the dependencies within the service. The size and complexity of the service can also mean that deploying the service needs special configuration. Lastly, such a service may become a performance bottleneck or a single point of failure.","cause":"Hidden or unclear requirements may make it difficult to identify fitting abstractions. Wrongly applied patterns like the Session Facade may also lead to a megaservice. The service designer may also be unfamiliar with the principles of high cohesion and low coupling.","solution":"The megaservice should be decomposed into several smaller services. The service's inappropriate methods need to be extracted to new interfaces.","example":"A service that implements operations for ordering, paying, and shipping.","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}","@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}","@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}","@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture","cohesion","abstraction"],"relatedItems":[]},{"name":"Nanoservices","aliases":["Tiny Service","Refactor Mercilessly","Fine Grained Web Service","Fine-Grained Services","Fine-Grained Interfaces"],"description":"A service is too fine-grained so that its communication and maintenance efforts outweigh its utility. Such services often require several other coupled services to complete an abstraction.","context":"An SOA is often created by combining several relatively simple services. These services may not have been built with an SOA scenario in mind, but may rely more on simple RPC interaction. This may produce a large number of calls between services.","detection":"A nanoservice interface provides only one or very few operations. A nanoservice generally implements an incomplete subset of one abstraction.","consequences":"Bad performance, fragmented logic, and an overhead in maintenance efforts. The functionality of one core abstraction is scattered across multiple services. This means multiple services may have to be changed to address a single feature or concept. Testing such a feature therefore also involves several services.","cause":"Hidden or unclear requirements make it very hard to identify fitting abstractions. Sometimes, individual use cases are therefore mapped to separate services. Misunderstanding or wrongly applying patterns may also lead to nanoservices. One example for this is the EJB Command pattern.","solution":"Consolidate and merge the scattered, but related functionality into a single service.","example":"Single services for creating an order, delivering an order, updating an order, and approving an order.","sources":["@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}","@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}","@article{Palma2014b, author={Palma, Francis and Moha, Naouel and Tremblay, Guy and Gu{\\'e}h{\\'e}neuc, Yann-Ga{\\\"e}l}, doi = {10.1007/978-3-319-09970-5_6}, isbn = {9783319099699}, issn = {16113349}, journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}, pages = {58--73}, title = {{Specification and detection of SOA antipatterns in web services}}, volume = {8627 LNCS}, year = {2014}}","@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}","@inproceedings{ouni2015web, author = {Ouni, Ali and Gaikovina Kula, Raula and Kessentini, Marouane and Inoue, Katsuro}, title = {Web Service Antipatterns Detection Using Genetic Programming}, booktitle = {Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation}, series = {GECCO '15}, year = {2015}, isbn = {978-1-4503-3472-3}, location = {Madrid, Spain}, pages = {1351--1358}, numpages = {8}, url = {http://doi.acm.org/10.1145/2739480.2754724}, doi = {10.1145/2739480.2754724}, publisher = {ACM}, address = {New York, NY, USA}}","@article{ouni2017search, author={A. Ouni and M. Kessentini and K. Inoue and M. {\\'O}. Cinn{\\'e}ide}, journal={IEEE Transactions on Services Computing}, title={Search-Based Web Service Antipatterns Detection}, year={2017}, volume={10}, number={4}, pages={603--617}, doi={10.1109/TSC.2015.2502595}, ISSN={1939-1374}, month={July}}","@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture","coupling","abstraction"],"relatedItems":[{"relation":"precedes","name":"Nothing New"},{"relation":"precedes","name":"Overstandardized SOA"},{"relation":"follows","name":"Big Bang"},{"relation":"follows","name":"Chatty Service"}]},{"name":"No Legacy","aliases":[""],"description":"A legacy application is completely rewritten instead of being (partly) modernized and integrated.","context":"Management does not want to keep a legacy system of decent quality and therefore wants to rewrite the entire application. The idea is that obsolete parts should be dropped and integration and modernization efforts are perceived to be similar to a complete rewrite. However, since SOA usually enables the efficient integration of applications, a complete rewrite of the legacy system should require much more efforts.","detection":"","consequences":"Very high investements and considerable risk are associated with a complete rewrite of large complex systems.","cause":"Project management does not understand that integrating legacy systems into a new SOA environment does not necessarily have to be a bad thing.","solution":"Project management first has to accept that stable and solid parts of a legacy systems are worth keeping. Integration candidates have to be chosen and modernized with user-oriented interfaces. Front-end gates can be used to achieve this.","example":"","sources":["@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}"],"tags":["soa","business","legacy","migration"],"relatedItems":[{"relation":"precedes","name":"Big Bang"},{"relation":"precedes","name":"Nothing New"},{"relation":"relates","name":"Overstandardized SOA"}]},{"name":"Nothing New","aliases":["Same Old Way"],"description":"Practices of object-oriented programming or other non-SOA techniques are used because the principles of service orientation have not been understood.","context":"In a migration or transition context, there is often a clash between the principles or foundations of paradigms or architectural styles, e.g. object orientation and service orientation.","detection":"","consequences":"These practices may lead to poorly usable interfaces and may hinder maintainability.","cause":"Experienced object-oriented developers may fail to see new features in service orientation and therefore apply their standard practices in the new style. No trainings are provided to address this and prepare the developers for the new paradigm.","solution":"If RPC is used in the legacy system, a complete restructuring of the architecture should be considered. If a service supports or computerizes human activities, it often should not rely on RPC.","example":"SOAP is only used as an envelop for RPC calls, which limits service interfaces to RPC-like interactions.","sources":["@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}","@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}"],"tags":["soa","application","migration"],"relatedItems":[{"relation":"follows","name":"Nanoservices"},{"relation":"follows","name":"Big Bang"},{"relation":"follows","name":"No Legacy"},{"relation":"relates","name":"Silver Bullet"},{"relation":"relates","name":"Golden Hammer"}]},{"name":"On-Line Only","aliases":[""],"description":"Batch mode application parts are actively avoided in a service-oriented system, even though parts of the system like long running tasks would be primed for a batch system.","context":"A batch system needs to be integrated into a service-oriented environment. This can e.g. be a legacy application or a system for long running transactions.","detection":"","consequences":"Solutions avoiding this integration can be expensive and unstable.","cause":"A prejudice exists that integrating batch applications in a service-oriented system is an obsolete technique.","solution":"Implement a classic data store and wrap it as a service. The data store is filled by batch subsystems and used interactively by other services.","example":"","sources":["@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}"],"tags":["soa","architecture","data_management"],"relatedItems":[]},{"name":"Overstandardized SOA","aliases":["Standardization Paralysis","Vendor Lock-In"],"description":"The usage of diverse proprietary technology leads to many potentially conflicting SOA standards and additional complexity in a system.","context":"Standardization is a useful part of any technical domain, but SOA standards are commonly set by large software vendors and do not focus on compatibility with other standards.","detection":"","consequences":"There are many (interdependent) standards that have to be introduced, updated, and maintained. Since these standards are usually set by large software vendors, the culture of large enterprises is (unintentionally) applied. Users of the standards also heavily depend on the vendors.","cause":"The tendency to standardize all technical aspects and dimensions of SOA leads to such an overstandardization. Moreover, XML enables an easy transformation of languages to standards.","solution":"Reduce standards to SOA aspects where they have the greatest effect. This can be achieved by using coarse-grained and domain-oriented interfaces. At first, vendors should also specify local standards and assess whether they are useful. Based on that, they should publish them as public standards or discard them.","example":"","sources":["@inproceedings{kral2009popular,author={Kr{\\'a}l, Jaroslav and {\\v{Z}}emlicka, Michal},booktitle={2009 Computation World: Future Computing, Service Computation, Cognitive, Adaptive, Content, Patterns},title={Popular SOA Antipatterns},year={2009},pages={271-276},doi={10.1109/ComputationWorld.2009.80},month={Nov}}","@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}"],"tags":["soa","architecture"],"relatedItems":[{"relation":"relates","name":"No Legacy"},{"relation":"follows","name":"Nanoservices"}]},{"name":"Sand Pile","aliases":[""],"description":"An SOA is implemented with one elementary service per software component resulting in many small software components that are sharing data.","context":"","detection":"Many small software components exist that share data.","consequences":"The large amount of small software components may cause inefficiencies and maintenance problems.","cause":"Sand Pile may be caused by a wrong grouping of \"atomic\" capabilities.","solution":"Regroup related elementary services into one software component with a common interface.","example":"Many highly specialized car service workshops are working separately. It is not an enterprise that provides all car repair services at one spot.","sources":["@inproceedings{kral2007most,author={Kral, Jaroslav and Zemlicka, Michal},booktitle={International Conference on Software Engineering Advances (ICSEA 2007)},title={The Most Important Service-Oriented Antipatterns},year={2007},pages={29--29},doi={10.1109/ICSEA.2007.74},month={Aug}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["soa","architecture","cohesion","coupling"],"relatedItems":[{"relation":"follows","name":"Nanoservices"}]},{"name":"Scattered Parasitic Functionality","aliases":[],"description":"Multiple services are responsible for the same concern and some of these services are also responsible for orthogonal concerns.","context":"That a single concern is splitted among multiple services and that at least one service handles multiple orthogonal concerns violates important service-oriented principles. This means that these concerns infect services with another orthogonal concern, like a parasite.","detection":"","consequences":"Modifiability, reusability, and testability may be reduced. Changing a scattered shared concern requires the changing and testing of several services. The shared concern also cannot be efficiently reused.","cause":"It may be a tempting shortcut to distribute a concern over several existing services.","solution":"Implement a monitoring connector to exchange the data or the status of the data.","example":"Service A has a SharedConcern. Service B and C also have this shared concern, but also an orthogonal concern ConcernB respectively ConcernC. ","sources":["@inproceedings{garcia2009toward, author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad}, title = {Toward a Catalogue of Architectural Bad Smells}, booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems}, series = {QoSA '09}, year = {2009}, isbn = {978-3-642-02350-7}, location = {East Stroudsburg, PA, USA}, pages = {146--162}, numpages = {17}, url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10}, doi = {10.1007/978-3-642-02351-4_10}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}}","@inproceedings{de2014architectural, author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica}, year = {2014}, month = {04}, pages = {12}, title = {Architectural bad smells in Software Product Lines: An exploratory study}, journal = {ACM International Conference Proceeding Series}, doi = {10.1145/2578128.2578237}}"],"tags":["microservices","soa","architecture","abstraction","coupling"],"relatedItems":[{"relation":"relates","name":"Stovepipe Service"}]},{"name":"Service Chain","aliases":["Percolating Process"],"description":"A chain of service calls fulfills common functionality.","context":"Multiple services exist that call each other sequentially to fulfill an abstraction or business process.","detection":"","consequences":"Such a chain may slow down performance and reduces the availability of the chained abstraction. It may also be harder to change the abstraction, especially with respect to the invocation order of services.","cause":"The organisation may have created a detailed map of processes, which resulted in a series of grand \"end to end\" process models that are categorised by their large number of steps and a lack of sub-processes. However, no valid business services have been identified and thus the process maps have been created without a proper service structure. This makes identifying valid services a tricky process, especially when looking for cross-functional or horizontal services.","solution":"The first resolution is to create the services architecture independently of the process map. This will provide a structure for breaking down processes and creating a clear hierarchy of use. Next, this service architecture should be compared with the process map to understand where the cuts should be made. The current system can then be incrementally refactored to create a more service-oriented solution by attacking major inflexibilities in the system.","example":"","sources":["@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@misc{Jones2006, title = {{SOA anti-patterns}}, year = {2006}, booktitle = {InfoQ}, author = {Jones, Steve}, url = {https://www.infoq.com/articles/SOA-anti-patterns} }"],"tags":["microservices","soa","architecture","coupling"],"relatedItems":[{"relation":"relates","name":"Chatty Service"},{"relation":"precedes","name":"Wrong Cuts"}]},{"name":"Shared Persistency","aliases":["Data Ownership"],"description":"Different services access the same database. In the worst case, different services access the same entities of the same schema.","context":"The implementation of Microservices usually follows a 'share nothing' philosophy. This is especially relevant for clear data ownership. Each data collection or schema usually belongs to exactly one service. The only allowed access to this data is via the interface of this service.","detection":"","consequences":"This smell highly couples the microservices connected to the same data, reducing team and service independence.","cause":"","solution":"Possible solutions are to \n 1. use independent databases for each service, \n 2. use a shared database with a set of private tables for each service that can be accessed by only that service, or \n 3. use a private database schema for each service.","example":"","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}"],"tags":["microservices","architecture","data_management","coupling"],"relatedItems":[]},{"name":"The Shiny Nickel","aliases":["Magpie"],"description":"The latest technology buzz is incorporated into your system for the sake of telling people about it.","context":"","detection":"","consequences":"Technologies are rarely re-used from one project to the next as IT delivery moves to the next shiny nickel. Each project lays down another technology stratum that increases the cost and complexity of support and creates an integration challenge for future projects.","cause":"The Shiny Nickel antipattern is often caused by soft procurement rules and a lack of a common IT strategy and vision. Often driven by \"golf-course\" product selection from business and IT, these products go hunting for a solution. Often, product procurement takes place independently from projects, which leads to technology decisions on projects being driven by a desire to minimise shelfware.","solution":"Fixing the shiny nickel is about knowing in which direction you want to go. This means defining what you want your architecture and enterprise to look like in a few years and understanding the steps, standards, and therefore technologies that will take you there. It also means getting a grip on IT procurement so decisions are ratified against the roadmap.","example":"Introducing an ESB for 2 services that have no translation or routing requirements.","sources":["@misc{Jones2006, title = {{SOA anti-patterns}}, year = {2006}, booktitle = {InfoQ}, author = {Jones, Steve}, url = {https://www.infoq.com/articles/SOA-anti-patterns} }"],"tags":["soa","application"],"relatedItems":[{"relation":"relates","name":"Silver Bullet"},{"relation":"relates","name":"Golden Hammer"}]},{"name":"Silver Bullet","aliases":["Web Services Will Fix Our Problems"],"description":"Services are used to solve a problem on top of an existing architecture, even though they are not really fitting for this problem.","context":"","detection":"The system involves not only web services, but also other architectural paradigms and styles.","consequences":"Using web services for such a problem either causes significant refactoring efforts or an additional maintenance overhead if functionality is just copied. Web services created in this way are also hard to reuse, because they were built for this specific purpose.","cause":"These issues are usually caused by the assumption that web services can fix issues that actually reside in the implementation of the underlying architecture. Another possibility is that high-level technical managers and not architects take these decisions without understanding them.","solution":"An extensive refactoring of the underlying system is needed.","example":"An example is a bloated session with a similarly structured web service endpoint on top of it. This causes tight coupling because the web service is specific to this session.","sources":["@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"],"tags":["microservices","soa","architecture"],"relatedItems":[{"relation":"relates","name":"Golden Hammer"},{"relation":"relates","name":"Nothing New"},{"relation":"relates","name":"The Shiny Nickel"}]},{"name":"SOAPY Business Logic","aliases":["Muddy Tiers"],"description":"A service endpoint implements business logic, but also deals with SOAP/XML processing.","context":"","detection":"Web service data types or processing tasks exist that also implement business logic. This can be the case, if the underlying business logic has methods that get typical web service implementation arguments, e.g. 'javax.activation.DataHandler'. Additionally, the business logic component may also process XML parsing.","consequences":"The business logic is not reusable, because it contains web service specific implementation.","cause":"One cause could be the inexperience in architecting n-tier solutions. Alternatively, the goal may be to implement a specific web service and it is not taken into account which other clients potentially want to access the same business logic.","solution":"A refactoring according to the business delegate pattern is needed. Therefore, one possibility would be to use stateless session beans or Java classes to implement the web service. Then these components should dispatch requests to the underlying business logic.","example":"A stateless session bean is used as implementation component for a web service. The bean directly receives the requests to the web services container and is therefore coupled to the JAX-RPC binding types.","sources":["@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}"],"tags":["soa","architecture"],"relatedItems":[{"relation":"relates","name":"Connector Envy"}]},{"name":"Stovepipe Service","aliases":["Multilayer Service"],"description":"Common low level functionality such as logging or currency conversion is duplicated over several services.","context":"","detection":"Stovepipe services typically have a large number of private implementation methods.","consequences":"Technical and utility functions are implemented inconsistently. Development time of stovepipe services is considerably larger. Duplicated code and different implementations for the same functionality also has a negative impact on maintainability.","cause":"Inexperience in developing multilayer architectures is one reason that can result in stovepipe services. They can also be caused by insufficient team communication and a lack of design or code reviews.","solution":"Refactor the common private methods of all services into new technical services or utility classes. Alternatively, these functionality can be refactored to a new super class from which all services can inherit.","example":"A service implements private methods for technical tasks such as 'auditEvent' or 'notify' which might also be implemented by other services.","sources":["@book{dudney2003j2ee, title={J2EE antipatterns}, author={Dudney, Bill and Asbury, Stephen and Krozak, Joseph K and Wittkopf, Kevin}, year={2003}, publisher={John Wiley \\& Sons}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["soa","architecture"],"relatedItems":[{"relation":"relates","name":"Scattered Parasitic Functionality"}]},{"name":"The Knot","aliases":[""],"description":"A set of low cohesive services is tightly coupled by hardcoded point-to-point integration and context-specific interfaces.","context":"","detection":"","consequences":"This decreases flexibility and reusability and makes it difficult to maintain and evolve these services. Due to the complex architecture, service response times may be higher and the availability of their abstractions may be lower.","cause":"Very complex or rapidly evolving business processes may cause such a harmful net of dependencies.","solution":"","example":"","sources":["@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}","@inproceedings{nayrolles2013improving, title={Improving SOA antipatterns detection in Service Based Systems by mining execution traces}, author={Nayrolles, Mathieu and Moha, Naouel and Valtchev, Petko}, booktitle={Reverse Engineering (WCRE), 2013 20th Working Conference on}, pages={321--330}, year={2013}, doi={10.1109/WCRE.2013.6671307}}","@inproceedings{palma2015study, title={A study on the taxonomy of service antipatterns}, author={Palma, Francis and Mohay, Naouel}, booktitle={Patterns Promotion and Anti-patterns Prevention (PPAP), 2015 IEEE 2nd Workshop on}, pages={5--8}, year={2015}, doi={10.1109/PPAP.2015.7076848}}"],"tags":["microservices","soa","architecture","cohesion","coupling"],"relatedItems":[]},{"name":"Transactional Integration","aliases":[""],"description":"Transactions extend across service boundaries and are not isolated inside services.","context":"","detection":"","consequences":"Such distributed transaction may lead to performance issues, security threats, or rigidity in the architecture.","cause":"Rapidly evolving business processes may result in such transactions. Starting the design of an SOA completely upfront without keeping some design decisions open may also lead to this antipattern.","solution":"Resolve the transactional integration by using one of the patterns Orchestration, Saga or Inversion of Communications.","example":"","sources":["@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}"],"tags":["microservices","soa","architecture"],"relatedItems":[{"relation":"precedes","name":"Wrong Cuts"}]},{"name":"Wrong Cuts","aliases":[""],"description":"Services are split on the basis of technical layers (presentation, business, and data layers) instead of business capabilities.","context":"","detection":"","consequences":"Such a wrong separation of concerns can lead to increased data-splitting complexity. Moreover, this may cause ripple effects on changes and therefore decreases maintainability. Lastly, it may impact performance, if several services are needed to fulfill an abstraction.","cause":"","solution":"Perform a clear analysis of business processes and the need for resources and use this knowledge to refactor the services according to bounded contexts.","example":"","sources":["@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}, doi={10.1109/ms.2018.2141031}}"],"tags":["microservices","architecture","cohesion","coupling"],"relatedItems":[{"relation":"follows","name":"Data Service"},{"relation":"follows","name":"Transactional Integration"},{"relation":"follows","name":"Service Chain"}]}]}