{"antiPatterns":[{"name":"API Versioning","description":"APIs are not semantically versioned","detection":"A lack of semantically consistent versions of APIs (e.g., v1.1, 1.2, etc.). \n Also proposed as Static Contract Pitfall.","consequences":"In the case of new versions of non-semantically-versioned APIs, API consumers may face connection issues. For example, the returning data might be different or might need to be called differently.","cause":"","solution":"APIs need to be semantically versioned to allow services to know \n whether they are communicating with the right version of the service or \n   whether they need to adapt their communication to a new contract.","example":"Api v1 than v3, ...","source":"On the Definition of Microservice Bad Smells","tags":["bad_smell"]},{"name":"Cyclic Dependency","description":"A cyclic chain of calls between microservices exists.","detection":"The existence of cycles of calls between microservices; e.g., A calls B, B calls C, and C calls back A.","consequences":"Microservices involved in a cyclic dependency can be hard to maintain or reuse in isolation.","cause":"","solution":"Refine the cycles according to their shape, 4 and apply the API Gateway pattern.","example":"A depends on B, B on C and C on A","source":"On the Definition of Microservice Bad Smells","tags":["bad_smell"]},{"name":"Hard-Coded Endpoints","description":"Hardcoded IP addresses and ports of the services between connected microservices exist. Also proposed as Hardcoded IPs and Ports.","detection":"","consequences":"Microservices connected with hardcoded endpoints lead to problems when their locations need to be changed.","cause":"","solution":"Adopt a service discovery approach.","example":"","source":"On the Definition of Microservice Bad Smells","tags":["bad_smell"]},{"name":"Megaservice","description":"A service that is responsible for many functionalities and should be decomposed into separated microservices.","detection":"","consequences":"","cause":"","solution":"","example":"","source":"@article{taibi2018definition, title={On the Definition of Microservice Bad Smells}, author={Taibi, Davide and Lenarduzzi, Valentina}, journal={IEEE software}, volume={35}, number={3}, pages={56--62}, year={2018}, publisher={IEEE}}","tags":["architecture"]},{"name":"Nanoservices","description":"A service is to fine-grained, so that communications, maintenance, and so on outweights its utility.","detection":"","consequences":"Bad performance, fragmendted logic and overhead.","cause":"","solution":"","example":"","source":"@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}","tags":["architecture"]},{"name":"Shared Persistency","description":"Different microservices access the same relational database. In the worst case, different services access the same entities of the same relational database. Also proposed as Data Ownership","detection":"","consequences":"This smell highly couples the microservices connected to the same data, reducing team and service independence.","cause":"","solution":"Three possible solutions are to \n 1. use independent databases for each service, \n 2. use a shared database with a set of private tables for each service that can be accessed by only that service, or \n 3. use a private database schema for each service.","example":"","source":"On the Definition of Microservice Bad Smells","tags":["bad_smell"]},{"name":"The Knot","description":"The services are tightly coupled by hardcoded point-to-point integration and context-specific interfaces","detection":"","consequences":"Decrease flexibility, hard to maintain","cause":"To complex buisness processe, wrong cuts","solution":"","example":"","source":"@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}","tags":["architecture"]},{"name":"Transactional Integration","description":"Transactions extend across service boundaries and are not isolated inside services.","detection":"","consequences":"","cause":"","solution":"","example":"","source":"@book{rotem2012soa,title={SOA patterns}, author={Rotem-Gal-Oz, Arnon and Bruno, Eric and Dahan, Udi}, year={2012}, publisher={Manning}}","tags":["architecture"]},{"name":"Wrong Cuts","description":"Microservices are split on the basis of technical layers (presentation, business, and data layers) instead of business capabilities.","detection":"","consequences":"The wrong separation of concerns and increased data-splitting complexity can occur.","cause":"","solution":"Perform a clear analysis of business processes and the need for resources.","example":"","source":"On the Definition of Microservice Bad Smells","tags":["bad_smell"]}]}